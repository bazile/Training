<#@ template hostspecific="true" language="C#" #>
<#@ output extension=".generated.cs" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="EnvDTE" #>
<# 
var dte = (this.Host as IServiceProvider).GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
var project = dte.Solution.FindProjectItem(this.Host.TemplateFile).ContainingProject as EnvDTE.Project;
string defaultNamespace = project.Properties.Item("DefaultNamespace").Value.ToString();
string className = Path.GetFileNameWithoutExtension(dte.ActiveDocument.Name);

var methodNames = new[] { 
	Tuple.Create("VeryBadReverse", "Очень плохо №1")
	, Tuple.Create("StillBadReverse", "Очень плохо №2")
	, Tuple.Create("LinqReverse", "Плохо (LINQ)")
	, Tuple.Create("GoodReverse", "Хорошо")
	, Tuple.Create("Reverse", "Отлично")
};
int maxMethodNameLen = methodNames.Select(t => t.Item1.Length).Max();
int maxCommentLen = methodNames.Select(t => t.Item2.Length).Max();

string arguments = "TestString";
#>using System;
using BelhardTraining.Benchmark.Core;

namespace <#=defaultNamespace#>
{
	partial class Program
	{
		static BelhardBenchmarkCompetition GetBenchmarkCompetition(string benchmarkId)
		{
			var benchmarks = new[] {
<# foreach (var tuple in methodNames) { string methodName = tuple.Item1; string comment = tuple.Item2; #>
				Tuple.Create<string, string, Action>("<#=methodName#>"<#=Pad(maxMethodNameLen, methodName)#>, "<#=comment#>"<#=Pad(maxCommentLen, comment)#>, <#=methodName#>Benchmark),
<# } #>
			};

			var competition = new BelhardBenchmarkCompetition();
			foreach (var tuple in benchmarks)
			{
				string id = tuple.Item1;
				Action benchmark = tuple.Item3;
				string comment = tuple.Item2;

				if (benchmarkId == null)
				{
					competition.AddTask(comment, benchmark);
				}
				else if (string.Equals(benchmarkId, id, StringComparison.OrdinalIgnoreCase))
				{
					competition.AddTask(comment, benchmark);
					break;
				}
			}
			return competition;
		}

<# foreach (var tuple in methodNames) { string methodName = tuple.Item1; #>
		static void <#=methodName#>Benchmark()
		{
			for (int i=0; i<iterations; i++)
			{
				<#=methodName+"("+arguments#>);
			}
		}
<# } #>
	}
}
<#+
string Pad(int maxLen, string s)
{
	int delta = maxLen - s.Length;
	return delta > 0 ? new string(' ', delta) : "";
}
#>